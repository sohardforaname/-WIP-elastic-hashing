<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="196589764"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,003,009 samples, 0.51%)</title><rect x="6.6327%" y="165" width="0.5102%" height="15" fill="rgb(227,0,7)" fg:x="13039117" fg:w="1003009"/><text x="6.8827%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 0.51%)</title><rect x="6.6327%" y="149" width="0.5102%" height="15" fill="rgb(217,0,24)" fg:x="13039117" fg:w="1003009"/><text x="6.8827%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 0.51%)</title><rect x="6.6327%" y="133" width="0.5102%" height="15" fill="rgb(221,193,54)" fg:x="13039117" fg:w="1003009"/><text x="6.8827%" y="143.50"></text></g><g><title>hashing::bucket::elastic_probe::ElasticProbe::next_no_limit (22,066,198 samples, 11.22%)</title><rect x="7.1429%" y="165" width="11.2245%" height="15" fill="rgb(248,212,6)" fg:x="14042126" fg:w="22066198"/><text x="7.3929%" y="175.50">hashing::bucket::..</text></g><g><title>hashing::probe::ProbeSequence::next_no_limit (4,012,036 samples, 2.04%)</title><rect x="16.3265%" y="149" width="2.0408%" height="15" fill="rgb(208,68,35)" fg:x="32096288" fg:w="4012036"/><text x="16.5765%" y="159.50">h..</text></g><g><title>hashing::bucket::func::&lt;impl hashing::bucket::map::ElasticHashMap&lt;K,V&gt;&gt;::de_phi (50,150,450 samples, 25.51%)</title><rect x="18.3673%" y="165" width="25.5102%" height="15" fill="rgb(232,128,0)" fg:x="36108324" fg:w="50150450"/><text x="18.6173%" y="175.50">hashing::bucket::func::&lt;impl hashing::buc..</text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (5,015,045 samples, 2.55%)</title><rect x="41.3265%" y="149" width="2.5510%" height="15" fill="rgb(207,160,47)" fg:x="81243729" fg:w="5015045"/><text x="41.5765%" y="159.50">co..</text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::get_bucket (1,003,009 samples, 0.51%)</title><rect x="43.8776%" y="165" width="0.5102%" height="15" fill="rgb(228,23,34)" fg:x="86258774" fg:w="1003009"/><text x="44.1276%" y="175.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::get (88,264,792 samples, 44.90%)</title><rect x="0.0000%" y="181" width="44.8980%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="88264792"/><text x="0.2500%" y="191.50">hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::get</text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::sequence (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="165" width="0.5102%" height="15" fill="rgb(220,122,19)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="175.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::hash_key (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="149" width="0.5102%" height="15" fill="rgb(250,228,42)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="133" width="0.5102%" height="15" fill="rgb(240,193,28)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="117" width="0.5102%" height="15" fill="rgb(216,20,37)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="101" width="0.5102%" height="15" fill="rgb(206,188,39)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="85" width="0.5102%" height="15" fill="rgb(217,207,13)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.51%)</title><rect x="44.3878%" y="69" width="0.5102%" height="15" fill="rgb(231,73,38)" fg:x="87261783" fg:w="1003009"/><text x="44.6378%" y="79.50"></text></g><g><title>alloc::vec::from_elem (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="165" width="0.5102%" height="15" fill="rgb(225,20,46)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="175.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="149" width="0.5102%" height="15" fill="rgb(210,31,41)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="133" width="0.5102%" height="15" fill="rgb(221,200,47)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="117" width="0.5102%" height="15" fill="rgb(226,26,5)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="101" width="0.5102%" height="15" fill="rgb(249,33,26)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="85" width="0.5102%" height="15" fill="rgb(235,183,28)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="69" width="0.5102%" height="15" fill="rgb(221,5,38)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="79.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="53" width="0.5102%" height="15" fill="rgb(247,18,42)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="63.50"></text></g><g><title>__libc_calloc (1,003,009 samples, 0.51%)</title><rect x="55.1020%" y="37" width="0.5102%" height="15" fill="rgb(241,131,45)" fg:x="108324972" fg:w="1003009"/><text x="55.3520%" y="47.50"></text></g><g><title>hashing::bucket::elastic_probe::ElasticProbe::next_no_limit (23,069,207 samples, 11.73%)</title><rect x="55.6122%" y="165" width="11.7347%" height="15" fill="rgb(249,31,29)" fg:x="109327981" fg:w="23069207"/><text x="55.8622%" y="175.50">hashing::bucket::..</text></g><g><title>hashing::probe::ProbeSequence::next_no_limit (3,009,027 samples, 1.53%)</title><rect x="65.8163%" y="149" width="1.5306%" height="15" fill="rgb(225,111,53)" fg:x="129388161" fg:w="3009027"/><text x="66.0663%" y="159.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::get_mut (76,228,684 samples, 38.78%)</title><rect x="44.8980%" y="181" width="38.7755%" height="15" fill="rgb(238,160,17)" fg:x="88264792" fg:w="76228684"/><text x="45.1480%" y="191.50">hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::get_mut</text></g><g><title>hashing::bucket::func::&lt;impl hashing::bucket::map::ElasticHashMap&lt;K,V&gt;&gt;::de_phi (32,096,288 samples, 16.33%)</title><rect x="67.3469%" y="165" width="16.3265%" height="15" fill="rgb(214,148,48)" fg:x="132397188" fg:w="32096288"/><text x="67.5969%" y="175.50">hashing::bucket::func::&lt;i..</text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (1,003,009 samples, 0.51%)</title><rect x="83.1633%" y="149" width="0.5102%" height="15" fill="rgb(232,36,49)" fg:x="163490467" fg:w="1003009"/><text x="83.4133%" y="159.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::insert (167,502,503 samples, 85.20%)</title><rect x="0.0000%" y="197" width="85.2041%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="167502503"/><text x="0.2500%" y="207.50">hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::insert</text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::try_seq (3,009,027 samples, 1.53%)</title><rect x="83.6735%" y="181" width="1.5306%" height="15" fill="rgb(229,88,8)" fg:x="164493476" fg:w="3009027"/><text x="83.9235%" y="191.50"></text></g><g><title>hashing::bucket::elastic_probe::ElasticProbe::probe (1,003,009 samples, 0.51%)</title><rect x="84.6939%" y="165" width="0.5102%" height="15" fill="rgb(213,181,19)" fg:x="166499494" fg:w="1003009"/><text x="84.9439%" y="175.50"></text></g><g><title>hashing::bucket::func::&lt;impl hashing::bucket::map::ElasticHashMap&lt;K,V&gt;&gt;::phi (1,003,009 samples, 0.51%)</title><rect x="84.6939%" y="149" width="0.5102%" height="15" fill="rgb(254,191,54)" fg:x="166499494" fg:w="1003009"/><text x="84.9439%" y="159.50"></text></g><g><title>bench::bench_insert (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="533" width="85.7143%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="543.50">bench::bench_insert</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="517" width="85.7143%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="527.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="501" width="85.7143%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="511.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="485" width="85.7143%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="495.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::test (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="469" width="85.7143%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="479.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="453" width="85.7143%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="463.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="437" width="85.7143%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="447.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="421" width="85.7143%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="431.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="405" width="85.7143%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="415.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="389" width="85.7143%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="373" width="85.7143%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="383.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="357" width="85.7143%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="341" width="85.7143%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="351.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="325" width="85.7143%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="309" width="85.7143%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="319.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="293" width="85.7143%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="303.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="277" width="85.7143%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="287.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="261" width="85.7143%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="271.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>bench::bench_insert::{{closure}} (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="245" width="85.7143%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="255.50">bench::bench_insert::{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="229" width="85.7143%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="239.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>bench::bench_insert::{{closure}}::{{closure}} (168,505,512 samples, 85.71%)</title><rect x="0.0000%" y="213" width="85.7143%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="168505512"/><text x="0.2500%" y="223.50">bench::bench_insert::{{closure}}::{{closure}}</text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::with_capacity (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="197" width="0.5102%" height="15" fill="rgb(251,118,11)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="207.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::new (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="181" width="0.5102%" height="15" fill="rgb(217,147,25)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="191.50"></text></g><g><title>hashing::bucket::map::ElasticHashMap&lt;K,V&gt;::calc_bucket_size (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="165" width="0.5102%" height="15" fill="rgb(247,81,37)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="149" width="0.5102%" height="15" fill="rgb(209,12,38)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="133" width="0.5102%" height="15" fill="rgb(227,1,9)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="143.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.51%)</title><rect x="85.2041%" y="117" width="0.5102%" height="15" fill="rgb(248,47,43)" fg:x="167502503" fg:w="1003009"/><text x="85.4541%" y="127.50"></text></g><g><title>bench-117773baa (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="837" width="86.2245%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="847.50">bench-117773baa</text></g><g><title>_start (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="821" width="86.2245%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="831.50">_start</text></g><g><title>__libc_start_main_impl (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="805" width="86.2245%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="815.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="789" width="86.2245%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="799.50">__libc_start_call_main</text></g><g><title>main (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="773" width="86.2245%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="757" width="86.2245%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="741" width="86.2245%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="725" width="86.2245%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="709" width="86.2245%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="693" width="86.2245%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="703.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="677" width="86.2245%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="661" width="86.2245%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="645" width="86.2245%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="629" width="86.2245%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="613" width="86.2245%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="623.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="597" width="86.2245%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="607.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="581" width="86.2245%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>bench::main (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="565" width="86.2245%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="575.50">bench::main</text></g><g><title>bench::benches (169,508,521 samples, 86.22%)</title><rect x="0.0000%" y="549" width="86.2245%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="169508521"/><text x="0.2500%" y="559.50">bench::benches</text></g><g><title>bench::bench_insert_std_hashmap (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="533" width="0.5102%" height="15" fill="rgb(211,96,35)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="543.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="517" width="0.5102%" height="15" fill="rgb(253,215,40)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="527.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="501" width="0.5102%" height="15" fill="rgb(211,81,21)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="511.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="485" width="0.5102%" height="15" fill="rgb(208,190,38)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="495.50"></text></g><g><title>criterion::routine::Routine::test (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="469" width="0.5102%" height="15" fill="rgb(235,213,38)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="479.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="453" width="0.5102%" height="15" fill="rgb(237,122,38)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="437" width="0.5102%" height="15" fill="rgb(244,218,35)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="421" width="0.5102%" height="15" fill="rgb(240,68,47)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="405" width="0.5102%" height="15" fill="rgb(210,16,53)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="389" width="0.5102%" height="15" fill="rgb(235,124,12)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="373" width="0.5102%" height="15" fill="rgb(224,169,11)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="357" width="0.5102%" height="15" fill="rgb(250,166,2)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="341" width="0.5102%" height="15" fill="rgb(242,216,29)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="325" width="0.5102%" height="15" fill="rgb(230,116,27)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="309" width="0.5102%" height="15" fill="rgb(228,99,48)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="293" width="0.5102%" height="15" fill="rgb(253,11,6)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="303.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="277" width="0.5102%" height="15" fill="rgb(247,143,39)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="287.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="261" width="0.5102%" height="15" fill="rgb(236,97,10)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="271.50"></text></g><g><title>bench::bench_insert_std_hashmap::{{closure}} (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="245" width="0.5102%" height="15" fill="rgb(233,208,19)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="255.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="229" width="0.5102%" height="15" fill="rgb(216,164,2)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="239.50"></text></g><g><title>bench::bench_insert_std_hashmap::{{closure}}::{{closure}} (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="213" width="0.5102%" height="15" fill="rgb(220,129,5)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="223.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="197" width="0.5102%" height="15" fill="rgb(242,17,10)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,003,009 samples, 0.51%)</title><rect x="85.7143%" y="181" width="0.5102%" height="15" fill="rgb(242,107,0)" fg:x="168505512" fg:w="1003009"/><text x="85.9643%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="821" width="0.5102%" height="15" fill="rgb(251,28,31)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="805" width="0.5102%" height="15" fill="rgb(233,223,10)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="789" width="0.5102%" height="15" fill="rgb(215,21,27)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="773" width="0.5102%" height="15" fill="rgb(232,23,21)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="757" width="0.5102%" height="15" fill="rgb(244,5,23)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="741" width="0.5102%" height="15" fill="rgb(226,81,46)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="725" width="0.5102%" height="15" fill="rgb(247,70,30)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="735.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.51%)</title><rect x="86.2245%" y="709" width="0.5102%" height="15" fill="rgb(212,68,19)" fg:x="169508521" fg:w="1003009"/><text x="86.4745%" y="719.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency as core::hash::Hash&gt;::hash::&lt;std::hash::random::DefaultHasher&gt; (1,003,009 samples, 0.51%)</title><rect x="86.7347%" y="821" width="0.5102%" height="15" fill="rgb(240,187,13)" fg:x="170511530" fg:w="1003009"/><text x="86.9847%" y="831.50"></text></g><g><title>&lt;cargo::core::manifest::Manifest as core::clone::Clone&gt;::clone (1,003,009 samples, 0.51%)</title><rect x="87.2449%" y="821" width="0.5102%" height="15" fill="rgb(223,113,26)" fg:x="171514539" fg:w="1003009"/><text x="87.4949%" y="831.50"></text></g><g><title>&lt;cargo::core::package_id::PackageIdInner as core::cmp::Ord&gt;::cmp (2,006,018 samples, 1.02%)</title><rect x="87.7551%" y="821" width="1.0204%" height="15" fill="rgb(206,192,2)" fg:x="172517548" fg:w="2006018"/><text x="88.0051%" y="831.50"></text></g><g><title>__memcmp_avx2_movbe (1,003,009 samples, 0.51%)</title><rect x="88.2653%" y="805" width="0.5102%" height="15" fill="rgb(241,108,4)" fg:x="173520557" fg:w="1003009"/><text x="88.5153%" y="815.50"></text></g><g><title>&lt;cargo::core::resolver::features::FeatureResolver&gt;::fvs_from_dependency (1,003,009 samples, 0.51%)</title><rect x="88.7755%" y="821" width="0.5102%" height="15" fill="rgb(247,173,49)" fg:x="174523566" fg:w="1003009"/><text x="89.0255%" y="831.50"></text></g><g><title>__memcmp_avx2_movbe (1,003,009 samples, 0.51%)</title><rect x="88.7755%" y="805" width="0.5102%" height="15" fill="rgb(224,114,35)" fg:x="174523566" fg:w="1003009"/><text x="89.0255%" y="815.50"></text></g><g><title>&lt;cargo::util::interning::InternedString&gt;::new (1,003,009 samples, 0.51%)</title><rect x="89.2857%" y="821" width="0.5102%" height="15" fill="rgb(245,159,27)" fg:x="175526575" fg:w="1003009"/><text x="89.5357%" y="831.50"></text></g><g><title>&lt;memchr::arch::x86_64::avx2::memchr::One&gt;::find_raw_avx2 (1,003,009 samples, 0.51%)</title><rect x="89.7959%" y="821" width="0.5102%" height="15" fill="rgb(245,172,44)" fg:x="176529584" fg:w="1003009"/><text x="90.0459%" y="831.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;toml_edit::de::value::ValueDeserializer, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_value::de::ValueVisitor&gt; (1,003,009 samples, 0.51%)</title><rect x="90.3061%" y="821" width="0.5102%" height="15" fill="rgb(236,23,11)" fg:x="177532593" fg:w="1003009"/><text x="90.5561%" y="831.50"></text></g><g><title>&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;alloc::collections::btree::map::BTreeMap&lt;cargo_util_schemas::manifest::PackageName, cargo_util_schemas::manifest::InheritableDependency&gt;&gt;&gt;, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde::de::DeserializeSeed&gt;::deserialize::&lt;toml_edit::de::value::ValueDeserializer&gt; (1,003,009 samples, 0.51%)</title><rect x="90.8163%" y="821" width="0.5102%" height="15" fill="rgb(205,117,38)" fg:x="178535602" fg:w="1003009"/><text x="91.0663%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.51%)</title><rect x="90.8163%" y="805" width="0.5102%" height="15" fill="rgb(237,72,25)" fg:x="178535602" fg:w="1003009"/><text x="91.0663%" y="815.50"></text></g><g><title>&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;cargo_util_schemas::manifest::PathValue&gt;&gt;, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde::de::DeserializeSeed&gt;::deserialize::&lt;toml_edit::de::value::ValueDeserializer&gt; (1,003,009 samples, 0.51%)</title><rect x="91.3265%" y="821" width="0.5102%" height="15" fill="rgb(244,70,9)" fg:x="179538611" fg:w="1003009"/><text x="91.5765%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.51%)</title><rect x="91.3265%" y="805" width="0.5102%" height="15" fill="rgb(217,125,39)" fg:x="179538611" fg:w="1003009"/><text x="91.5765%" y="815.50"></text></g><g><title>&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;cargo_util_schemas::manifest::StringOrBool&gt;&gt;, cargo::util::toml::deserialize_toml::{closure#0}&gt; as serde::de::DeserializeSeed&gt;::deserialize::&lt;toml_edit::de::value::ValueDeserializer&gt; (1,003,009 samples, 0.51%)</title><rect x="91.8367%" y="821" width="0.5102%" height="15" fill="rgb(235,36,10)" fg:x="180541620" fg:w="1003009"/><text x="92.0867%" y="831.50"></text></g><g><title>&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;alloc::collections::btree::map::BTreeMap&lt;_, _&gt; as serde::de::Deserialize&gt;::deserialize::MapVisitor&lt;cargo_util_schemas::manifest::FeatureName, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;, cargo::util::toml::deserialize_toml::{closure#0}&gt;&gt; (1,003,009 samples, 0.51%)</title><rect x="92.3469%" y="821" width="0.5102%" height="15" fill="rgb(251,123,47)" fg:x="181544629" fg:w="1003009"/><text x="92.5969%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.51%)</title><rect x="92.3469%" y="805" width="0.5102%" height="15" fill="rgb(221,13,13)" fg:x="181544629" fg:w="1003009"/><text x="92.5969%" y="815.50"></text></g><g><title>&lt;toml_edit::key::Key as core::clone::Clone&gt;::clone (1,003,009 samples, 0.51%)</title><rect x="92.8571%" y="821" width="0.5102%" height="15" fill="rgb(238,131,9)" fg:x="182547638" fg:w="1003009"/><text x="93.1071%" y="831.50"></text></g><g><title>&lt;toml_edit::parser::key::simple_key as core::ops::function::FnMut&lt;(&amp;mut winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;,)&gt;&gt;::call_mut (1,003,009 samples, 0.51%)</title><rect x="93.3673%" y="821" width="0.5102%" height="15" fill="rgb(211,50,8)" fg:x="183550647" fg:w="1003009"/><text x="93.6173%" y="831.50"></text></g><g><title>&lt;winnow::combinator::parser::Context&lt;winnow::combinator::parser::Context&lt;winnow::combinator::core::cut_err&lt;winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;, core::ops::range::Range&lt;usize&gt;, winnow::error::ContextError, toml_edit::parser::trivia::line_trailing&gt;::{closure#0}, winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;, core::ops::range::Range&lt;usize&gt;, winnow::error::ContextError, winnow::error::StrContext&gt;, winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;, core::ops::range::Range&lt;usize&gt;, winnow::error::ContextError, winnow::error::StrContext&gt; as winnow::parser::Parser&lt;winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;, core::ops::range::Range&lt;usize&gt;, winnow::error::ContextError&gt;&gt;::parse_next (1,003,009 samples, 0.51%)</title><rect x="93.8776%" y="821" width="0.5102%" height="15" fill="rgb(245,182,24)" fg:x="184553656" fg:w="1003009"/><text x="94.1276%" y="831.50"></text></g><g><title>OBJ_obj2nid (1,003,009 samples, 0.51%)</title><rect x="94.3878%" y="821" width="0.5102%" height="15" fill="rgb(242,14,37)" fg:x="185556665" fg:w="1003009"/><text x="94.6378%" y="831.50"></text></g><g><title>OPENSSL_LH_retrieve (1,003,009 samples, 0.51%)</title><rect x="94.8980%" y="821" width="0.5102%" height="15" fill="rgb(246,228,12)" fg:x="186559674" fg:w="1003009"/><text x="95.1480%" y="831.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="821" width="0.5102%" height="15" fill="rgb(213,55,15)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="805" width="0.5102%" height="15" fill="rgb(209,9,3)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="789" width="0.5102%" height="15" fill="rgb(230,59,30)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="799.50"></text></g><g><title>alloc::alloc::realloc (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="773" width="0.5102%" height="15" fill="rgb(209,121,21)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="783.50"></text></g><g><title>__GI___libc_realloc (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="757" width="0.5102%" height="15" fill="rgb(220,109,13)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="767.50"></text></g><g><title>_int_realloc (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="741" width="0.5102%" height="15" fill="rgb(232,18,1)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="751.50"></text></g><g><title>_int_malloc (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="725" width="0.5102%" height="15" fill="rgb(215,41,42)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="735.50"></text></g><g><title>unlink_chunk (1,003,009 samples, 0.51%)</title><rect x="95.4082%" y="709" width="0.5102%" height="15" fill="rgb(224,123,36)" fg:x="187562683" fg:w="1003009"/><text x="95.6582%" y="719.50"></text></g><g><title>anstream::adapter::strip::next_bytes (1,003,009 samples, 0.51%)</title><rect x="95.9184%" y="821" width="0.5102%" height="15" fill="rgb(240,125,3)" fg:x="188565692" fg:w="1003009"/><text x="96.1684%" y="831.50"></text></g><g><title>asn1_template_noexp_d2i (1,003,009 samples, 0.51%)</title><rect x="96.4286%" y="821" width="0.5102%" height="15" fill="rgb(205,98,50)" fg:x="189568701" fg:w="1003009"/><text x="96.6786%" y="831.50"></text></g><g><title>core::ptr::drop_in_place::&lt;toml_edit::repr::Formatted&lt;alloc::string::String&gt;&gt; (1,003,009 samples, 0.51%)</title><rect x="96.9388%" y="821" width="0.5102%" height="15" fill="rgb(205,185,37)" fg:x="190571710" fg:w="1003009"/><text x="97.1888%" y="831.50"></text></g><g><title>core::ptr::drop_in_place::&lt;winnow::error::ErrMode&lt;winnow::error::ContextError&gt;&gt; (1,003,009 samples, 0.51%)</title><rect x="97.4490%" y="821" width="0.5102%" height="15" fill="rgb(238,207,15)" fg:x="191574719" fg:w="1003009"/><text x="97.6990%" y="831.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,003,009 samples, 0.51%)</title><rect x="97.9592%" y="821" width="0.5102%" height="15" fill="rgb(213,199,42)" fg:x="192577728" fg:w="1003009"/><text x="98.2092%" y="831.50"></text></g><g><title>toml_edit::parser::document::document::{closure#0}::{closure#1} (1,003,009 samples, 0.51%)</title><rect x="98.4694%" y="821" width="0.5102%" height="15" fill="rgb(235,201,11)" fg:x="193580737" fg:w="1003009"/><text x="98.7194%" y="831.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.51%)</title><rect x="98.4694%" y="805" width="0.5102%" height="15" fill="rgb(207,46,11)" fg:x="193580737" fg:w="1003009"/><text x="98.7194%" y="815.50"></text></g><g><title>toml_edit::parser::document::parse_keyval (1,003,009 samples, 0.51%)</title><rect x="98.9796%" y="821" width="0.5102%" height="15" fill="rgb(241,35,35)" fg:x="194583746" fg:w="1003009"/><text x="99.2296%" y="831.50"></text></g><g><title>all (196,589,764 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="196589764"/><text x="0.2500%" y="863.50"></text></g><g><title>cargo (27,081,243 samples, 13.78%)</title><rect x="86.2245%" y="837" width="13.7755%" height="15" fill="rgb(247,202,23)" fg:x="169508521" fg:w="27081243"/><text x="86.4745%" y="847.50">cargo</text></g><g><title>winnow::combinator::core::opt::&lt;winnow::stream::Stateful&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::parser::prelude::RecursionCheck&gt;, alloc::borrow::Cow&lt;str&gt;, winnow::error::ContextError, toml_edit::parser::strings::basic_chars&gt;::{closure#0} (1,003,009 samples, 0.51%)</title><rect x="99.4898%" y="821" width="0.5102%" height="15" fill="rgb(219,102,11)" fg:x="195586755" fg:w="1003009"/><text x="99.7398%" y="831.50"></text></g></svg></svg>